{
  
    
        "post0": {
            "title": "Fashion MNIST using Linear Layers with JAX",
            "content": "My main objective here is to develop a Keras like API for JAX, and use it on the so-called Fashion MNIST dataset. . The type of model we&#39;re looking to build can be represented in Keras, as follows: . model = keras.Sequential([ keras.layers.Flatten(input_shape=(28,28)), keras.layers.Dense(128, activation=keras.activations.relu), keras.layers.Dense(10, activation=keras.activations.softmax) ]) model.compile( loss=keras.losses.sparse_categorical_crossentropy, optimizer=keras.optimizers.Adam(), metrics=[&#39;accuracy&#39;]) model.fit(X_train, y_train, epochs=5) . import jax import jax.numpy as jnp import numpy as np import matplotlib.pyplot as plt import optax import tensorflow as tf from typing import Tuple, List, Any . 2022-07-13 13:57:52.214672: W tensorflow/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library &#39;libcudart.so.11.0&#39;; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/lib:/usr/local/bin:/usr/local/lib: . Grabbing the Data . fashion_mnist = tf.keras.datasets.fashion_mnist (X_train, y_train), (X_test, y_test) = fashion_mnist.load_data() . print(f&#39;Number of training samples = {len(y_train)}&#39;) print(f&#39;Number of test samples = {len(y_test)}&#39;) . Number of training samples = 60000 Number of test samples = 10000 . X = X_train[0] np.set_printoptions(linewidth=200) plt.imshow(X, cmap=&#39;gray&#39;) print(X) . [[ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] [ 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 13 73 0 0 1 4 0 0 0 0 1 1 0] [ 0 0 0 0 0 0 0 0 0 0 0 0 3 0 36 136 127 62 54 0 0 0 1 3 4 0 0 3] [ 0 0 0 0 0 0 0 0 0 0 0 0 6 0 102 204 176 134 144 123 23 0 0 0 0 12 10 0] [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 155 236 207 178 107 156 161 109 64 23 77 130 72 15] [ 0 0 0 0 0 0 0 0 0 0 0 1 0 69 207 223 218 216 216 163 127 121 122 146 141 88 172 66] [ 0 0 0 0 0 0 0 0 0 1 1 1 0 200 232 232 233 229 223 223 215 213 164 127 123 196 229 0] [ 0 0 0 0 0 0 0 0 0 0 0 0 0 183 225 216 223 228 235 227 224 222 224 221 223 245 173 0] [ 0 0 0 0 0 0 0 0 0 0 0 0 0 193 228 218 213 198 180 212 210 211 213 223 220 243 202 0] [ 0 0 0 0 0 0 0 0 0 1 3 0 12 219 220 212 218 192 169 227 208 218 224 212 226 197 209 52] [ 0 0 0 0 0 0 0 0 0 0 6 0 99 244 222 220 218 203 198 221 215 213 222 220 245 119 167 56] [ 0 0 0 0 0 0 0 0 0 4 0 0 55 236 228 230 228 240 232 213 218 223 234 217 217 209 92 0] [ 0 0 1 4 6 7 2 0 0 0 0 0 237 226 217 223 222 219 222 221 216 223 229 215 218 255 77 0] [ 0 3 0 0 0 0 0 0 0 62 145 204 228 207 213 221 218 208 211 218 224 223 219 215 224 244 159 0] [ 0 0 0 0 18 44 82 107 189 228 220 222 217 226 200 205 211 230 224 234 176 188 250 248 233 238 215 0] [ 0 57 187 208 224 221 224 208 204 214 208 209 200 159 245 193 206 223 255 255 221 234 221 211 220 232 246 0] [ 3 202 228 224 221 211 211 214 205 205 205 220 240 80 150 255 229 221 188 154 191 210 204 209 222 228 225 0] [ 98 233 198 210 222 229 229 234 249 220 194 215 217 241 65 73 106 117 168 219 221 215 217 223 223 224 229 29] [ 75 204 212 204 193 205 211 225 216 185 197 206 198 213 240 195 227 245 239 223 218 212 209 222 220 221 230 67] [ 48 203 183 194 213 197 185 190 194 192 202 214 219 221 220 236 225 216 199 206 186 181 177 172 181 205 206 115] [ 0 122 219 193 179 171 183 196 204 210 213 207 211 210 200 196 194 191 195 191 198 192 176 156 167 177 210 92] [ 0 0 74 189 212 191 175 172 175 181 185 188 189 188 193 198 204 209 210 210 211 188 188 194 192 216 170 0] [ 2 0 0 0 66 200 222 237 239 242 246 243 244 221 220 193 191 179 182 182 181 176 166 168 99 58 0 0] [ 0 0 0 0 0 0 0 40 61 44 72 41 35 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]] . X_train, X_test = X_train / 255.0, X_test / 255.0 . Model API . class Model: def forward(self, params, X, y): raise NotImplementedError def compile(self, loss, optimizer, metrics, params): self.loss = loss self.optimizer = optimizer self.metrics = metrics self.params = params def fit(self, X_train, y_train): train_dataset = tf.data.Dataset.from_tensor_slices((X_train, y_train)) train_dataset = train_dataset.shuffle(100).batch(32) loss = self.loss optimizer = self.optimizer params = self.params # Get the parameters from the model ... # Taken from optax tutorial code ... opt_state = self.optimizer.init(params) def step(params, opt_state, batch, labels): loss_value, grads = jax.value_and_grad(loss)(params, self.forward, batch, labels) updates, opt_state = optimizer.update(grads, opt_state, params) params = optax.apply_updates(params, updates) return params, opt_state, loss_value # one epoch for i, (batch, labels) in enumerate(train_dataset.as_numpy_iterator()): loss_value, _ = jax.value_and_grad(loss)(params, self.forward, batch, labels) params, opt_state, loss_value = step(params, opt_state, batch, labels) if i % 100 == 0: print(f&#39;step {i}, loss: {loss_value}&#39;) . class Network: pass class Function: pass . class Dense(Network): w: jnp.ndarray b: jnp.ndarray input_shape: Tuple[int] def __init__(self, num_features, activation=jax.nn.relu): self.num_features = num_features self.activation = activation def setup(self, input_shape, seed=1234): self.input_shape = input_shape shape = (self.num_features, self.input_shape) key = jax.random.PRNGKey(seed) self.w = jax.random.normal(key, shape) * jnp.sqrt(2.0 / input_shape) self.b = jnp.zeros(self.num_features) @property def params(self): return {&#39;w&#39;: self.w, &#39;b&#39;: self.b} def __call__(self, x): return self.activation(jnp.dot(self.w, x) + self.b) . def flatten_Dense(layer: Dense): params = (layer.w, layer.b) extra_stuff = { &#39;num_features&#39;: layer.num_features, &#39;activation&#39;: layer.activation, &#39;input_shape&#39;: layer.input_shape } return params, extra_stuff def unflatten_Dense(extra_stuff, params) -&gt; Dense: layer = Dense(num_features=extra_stuff[&#39;num_features&#39;], activation=extra_stuff[&#39;activation&#39;]) layer.w = params[0] layer.b = params[1] layer.input_shape = extra_stuff[&#39;input_shape&#39;] return layer jax.tree_util.register_pytree_node( Dense, flatten_Dense, unflatten_Dense ) . l = Dense(10) l.setup(input_shape=3) jax.tree_util.tree_flatten(l) . WARNING:absl:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.) . ([DeviceArray([[-0.77767605, -1.6257328 , 0.8562147 ], [ 0.2656164 , -0.91964155, 0.33663693], [ 1.6229765 , 0.22684166, -1.2966851 ], [ 0.23250706, 1.2053852 , 0.23687442], [-0.3150987 , 0.7502025 , 1.0367401 ], [-0.76967674, 0.45772657, -1.1808424 ], [-1.3382986 , -0.559498 , 0.28776148], [ 0.20669922, -1.457551 , 0.82045996], [-0.27901036, 0.01738252, 0.06019784], [ 0.00342628, 0.37365758, 0.5010083 ]], dtype=float32), DeviceArray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)], PyTreeDef(CustomNode(&lt;class &#39;__main__.Dense&#39;&gt;[{&#39;num_features&#39;: 10, &#39;activation&#39;: &lt;jax._src.custom_derivatives.custom_jvp object at 0x7fae45f02e50&gt;, &#39;input_shape&#39;: 3}], [*, *]))) . class Flatten(Function): input_shape: Tuple[int] num_features: int def __init__(self, input_shape): self.input_shape = input_shape self.num_features= np.prod(input_shape) def __call__(self, x): return jnp.reshape(x, -1) . def flatten_Flatten(layer: Flatten): params = [] extra_stuff = { &#39;input_shape&#39;: layer.input_shape } return params, extra_stuff def unflatten_Flatten(extra_stuff, params) -&gt; Dense: return Flatten(input_shape=extra_stuff[&#39;input_shape&#39;]) jax.tree_util.register_pytree_node( Flatten, flatten_Flatten, unflatten_Flatten ) . l = Flatten((28,28)) jax.tree_util.tree_flatten(l) . ([], PyTreeDef(CustomNode(&lt;class &#39;__main__.Flatten&#39;&gt;[{&#39;input_shape&#39;: (28, 28)}], []))) . class Sequential(Network): layers: List params: Any input_shape: Tuple[int] def __init__(self, *layers): self.layers = layers self.params = [] def setup(self, input_shape): self.input_shape = input_shape input_shape = self.input_shape for layer in self.layers: if isinstance(layer, Network): layer.setup(input_shape) self.params.append(layer.params) input_shape = layer.num_features elif isinstance(layer, Flatten): input_shape = layer.num_features def __call__(self, x): output = x for layer in self.layers: output = layer(output) return output . print(jax.tree_util.tree_flatten([{&#39;a&#39;: 1, &#39;b&#39;: 5}, {&#39;c&#39;: 7}])) . ([1, 5, 7], PyTreeDef([{&#39;a&#39;: *, &#39;b&#39;: *}, {&#39;c&#39;: *}])) . def flatten_Sequential(model: Sequential): params = model.params extra_stuff = {&#39;layers&#39;: model.layers} return params, extra_stuff def unflatten_Sequential(extra_stuff, params) -&gt; Dense: layers = extra_stuff[&#39;layers&#39;] model = Sequential(*layers) model.setup(input_shape=extra_stuff[&#39;input_shape&#39;]) return model jax.tree_util.register_pytree_node( Sequential, flatten_Sequential, unflatten_Sequential ) . model = Sequential( Flatten(input_shape=(28, 28)), Dense(128, activation=jax.nn.relu), Dense(10, activation = jax.nn.softmax) ) model.setup(input_shape=(28, 28)) . model.params l = jax.tree_util.tree_flatten(model.params) . DeviceArray([[-0.00503162, -0.11710759, 0.05479915, ..., -0.08478684, -0.01258498, -0.0106819 ], [-0.02930931, -0.06342698, -0.07211312, ..., -0.06885359, 0.05326153, -0.00705581], [-0.01227331, -0.08667105, 0.01609307, ..., -0.07811324, 0.01763334, 0.00712718], ..., [-0.00622975, -0.08475864, -0.0552172 , ..., 0.05935797, 0.0743569 , -0.00805993], [ 0.10648176, -0.02254054, -0.03166944, ..., -0.01719078, 0.00110678, 0.0392415 ], [-0.037219 , -0.02834321, 0.00695875, ..., -0.0069246 , 0.04329436, 0.07048796]], dtype=float32) . Loss Function . In Equinox and Treex, loss functions in which the model is the first argument are jitted. I can&#39;t get this to work now (I think), because I&#39;m not converting my module instantiation to a PyTree. This seems to be the secret: Treex and Equinox found a way to convert their versions of modules to pytrees. . a = Dense(10) a.setup(10) . {&#39;weights&#39;: DeviceArray([[ 0.4955482 , 0.31323454, -0.16431722, -0.1778598 , -0.37309384, -0.27601704, 0.6786144 , -0.83603036, -0.37456733, -0.38529804], [-0.51664037, 0.23452531, 0.39358795, -0.81366616, -0.30139554, 0.12572241, -0.27614236, 0.04341735, 1.0657046 , 1.0121646 ], [-0.02414936, 0.7453478 , -0.28615332, -0.196245 , 0.33748606, 0.9765807 , -0.12719607, 0.329515 , -0.4071786 , 0.12246487], [-0.68219537, 0.03157214, 0.57286984, -0.44964808, 0.3903244 , 0.06237474, -0.3355008 , 1.0056379 , -0.29798067, -0.05773307], [-0.98469573, -0.32533288, 0.1938749 , -0.286879 , -0.3740165 , -1.1384696 , -1.29627 , 0.1767095 , -0.39158744, -0.80702335], [ 0.45510042, 0.4024033 , -0.0216945 , 0.2830267 , 0.0508937 , -0.0493672 , 0.16445382, 0.7305577 , 0.59985423, -0.28474948], [ 0.06098274, -0.40136126, 0.16223292, -0.4865787 , 0.04620648, -0.25004682, -0.24693362, -0.08435134, 0.13579482, -0.7653634 ], [ 0.37850198, -0.21638699, 0.3038623 , -0.12869892, 0.7800084 , 0.5768901 , -1.0877036 , -0.7946388 , -0.38121703, -0.38984403], [ 0.374261 , 0.24334376, -0.04227831, -0.25231916, 0.34803241, 0.9141584 , 0.05031163, -0.29306245, 0.131548 , -0.05075309], [-0.6140513 , 0.05466658, 0.02913119, 0.10320958, -0.94363356, 0.60672456, 0.24040386, 0.237728 , -0.05438365, -0.28856188]], dtype=float32), &#39;bias&#39;: DeviceArray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)} . @jax.jit #- this fails because model is not a pytree def loss(model, X, y): # Need to one-bot encode input labels, recall that MNIST has 10 classes, 0-9 y_one_hot = jax.nn.one_hot(y, 10).astype(jnp.float32) logits = jax.vmap(model)(X) # calculate loss for each sample in minibatch #loss = optax.softmax_cross_entropy(logits, y_one_hot) # average the losses for each sample in minibatch #loss = loss.mean() loss = logits.mean() return loss . def cross_entropy_loss(params, forward, X, y): # Need to one-bot encode input labels, recall that MNIST has 10 classes, 0-9 y_one_hot = jax.nn.one_hot(y, 10).astype(jnp.float32) logits = jax.vmap(forward, in_axes=(None, 0))(params, X) # calculate loss for each sample in minibatch loss = optax.softmax_cross_entropy(logits, y_one_hot) # average the losses for each sample in minibatch loss = loss.mean() return loss . model = Dense(10) model.setup(10) model.w loss(model, np.random.randn(5, 10), [1,0,2,3,1]) . DeviceArray(0.70658493, dtype=float32) . model = Sequential( Flatten(input_shape=(28, 28)), Dense(128, activation=jax.nn.relu), Dense(10, activation = jax.nn.softmax) ) init_params = model.setup(input_shape=(28, 28)) loss(model, np.random.randn(5, 28, 28), [1,0,2,3,1]) . TypeError Traceback (most recent call last) /tmp/ipykernel_83295/1912331193.py in &lt;module&gt; 7 init_params = model.setup(input_shape=(28, 28)) 8 -&gt; 9 loss(model, np.random.randn(5, 28, 28), [1,0,2,3,1]) 10 [... skipping hidden 2 frame] ~/anaconda3/lib/python3.8/site-packages/jax/_src/api.py in _check_arg(arg) 2972 def _check_arg(arg): 2973 if not (isinstance(arg, core.Tracer) or _valid_jaxtype(arg)): -&gt; 2974 raise TypeError(f&#34;Argument &#39;{arg}&#39; of type {type(arg)} is not a valid JAX type.&#34;) 2975 2976 # TODO(mattjj,necula): this duplicates code in core.valid_jaxtype, but one TypeError: Argument &#39;&lt;__main__.Sequential object at 0x7f1eabc21eb0&gt;&#39; of type &lt;class &#39;__main__.Sequential&#39;&gt; is not a valid JAX type. . model.forward(init_params, np.random.rand(28, 28)) . DeviceArray([0.02157694, 0.09008522, 0.01330612, 0.14697005, 0.03000481, 0.31934047, 0.08668316, 0.07532562, 0.19995402, 0.01675361], dtype=float32) . cross_entropy_loss(init_params, model.forward, np.random.randn(2, 28, 28), [1, 2]) . DeviceArray(2.388558, dtype=float32) . model.compile(loss=cross_entropy_loss, optimizer = optax.adam(learning_rate=1e-3), metrics = [&#39;accuracy&#39;], params=init_params) model.fit(X_train, y_train) . step 0, loss: 2.3042030334472656 step 100, loss: 1.7702372074127197 step 200, loss: 1.8559722900390625 step 300, loss: 1.8455866575241089 step 400, loss: 1.6030317544937134 step 500, loss: 1.7808022499084473 step 600, loss: 1.7045600414276123 step 700, loss: 1.6650400161743164 step 800, loss: 1.6782312393188477 step 900, loss: 1.759960651397705 step 1000, loss: 1.7251852750778198 step 1100, loss: 1.7144274711608887 step 1200, loss: 1.5780982971191406 step 1300, loss: 1.5931434631347656 step 1400, loss: 1.7018799781799316 step 1500, loss: 1.7146620750427246 step 1600, loss: 1.6924097537994385 step 1700, loss: 1.626793622970581 step 1800, loss: 1.6654064655303955 . Training Loop . The training loop tunes the model parameters for a specified number of epochs. For now the parameters are adjusted once per epoch, after the entire dataset is consumed by the model. . Performance Curve . Let&#39;s see the trend in the loss function. . Conclusion . X = np.random.randn(10, 3) w = np.random.randn(5, 3) . np.dot(X, np.transpose(w)) . array([[ 0.95615652, -0.60910943, 0.47719404, 0.50628421, -0.57886369], [ 3.09498684, 1.70024379, -1.01957485, 2.25813896, -0.37952626], [-3.67871561, -0.1351104 , 0.04294664, -1.84479421, 0.98852387], [-1.00596024, 0.46315551, 0.67104569, 3.13116358, -1.09329311], [ 2.07878921, 1.88358723, -1.42939824, 0.84352964, 0.39912581], [ 2.91327168, -1.07647233, 0.73089571, 1.0445742 , -1.1687821 ], [ 1.03321149, 0.51671102, 0.70734573, 4.30933842, -1.72017219], [-2.73799462, -1.54710401, 1.83484434, 1.17423297, -1.08464385], [-1.6715637 , -2.74092988, 1.91974295, -1.18807747, -0.68628707], [ 1.21170605, 0.15311168, -0.1815407 , 0.30359954, -0.13915325]]) . def lin(x): return jnp.dot(w, x) yy = jax.vmap(lin)(X) print(yy) . [[ 0.9561565 -0.6091094 0.47719404 0.50628424 -0.5788637 ] [ 3.0949867 1.7002438 -1.0195749 2.258139 -0.37952614] [-3.6787155 -0.13511032 0.04294658 -1.8447943 0.9885239 ] [-1.0059603 0.46315545 0.67104566 3.1311636 -1.093293 ] [ 2.0787892 1.8835871 -1.4293982 0.8435297 0.39912578] [ 2.9132717 -1.0764723 0.7308957 1.044574 -1.1687821 ] [ 1.0332114 0.516711 0.7073457 4.309338 -1.7201722 ] [-2.7379947 -1.547104 1.8348444 1.174233 -1.0846438 ] [-1.6715636 -2.7409298 1.919743 -1.1880776 -0.686287 ] [ 1.2117062 0.15311167 -0.1815407 0.3035995 -0.13915324]] .",
            "url": "https://jrreed83.github.io/technicalities/jupyter/2022/07/09/2022-JAX-MNIST.html",
            "relUrl": "/jupyter/2022/07/09/2022-JAX-MNIST.html",
            "date": " • Jul 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Linear Regression with JAX",
            "content": "In this notebook, JAX will be used to solve a basic linear regression problem: given inputs $X$ and targets $y$, find the weights $w$ and bias $b$ that minimizes the loss function. . $$ ell (w, b) = | X w + b - y | ^ 2 $$In the process of solving this problem, I&#39;ll slowly build up a basic neural network library. Let me say upfront that I&#39;m new to JAX, but it looks like a very elegant library. . import jax import jax.numpy as jnp import numpy as np import matplotlib.pyplot as plt . Generate Data . The first thing I need to to is generate some mock data satisfying a linear hyperplane . $$ y = x cdot w + b $$Here&#39;s a little utility function we can use for this purpose. . def generate_data(w, b, num_samples = 10): seed = 3551 key = jax.random.PRNGKey(seed) X = jax.random.normal(key, (num_samples, 3)) y = jnp.dot(X, w) + b return X, y . Model Definition . We use a simple linear model, with the parameters (weights and biases) stored in a simple python dictionary, named params. Although it may not be clear in the function definition, the x argument should be interpreted as a single input sample, rather than a mini-batch of samples. Applying the model to a batch of samples will be handled in the loss function below. . def linear_model(params, x): w = params[&#39;w&#39;] b = params[&#39;b&#39;] return jnp.dot(x, w) + b . Loss Function . The loss function takes the current set of parameters, the model, and the data and calculates the distance between the model predictions and the targets. . @jax.value_and_grad def mse_loss(params, model, X, y): l = jax.vmap(model, in_axes=(None, 0))(params, X) return jnp.mean((l - y)**2) . By decorating the loss with @jax.value_and_grad annotation, we&#39;re telling the JAX system that the value and gradient should be returned. Note also that the model passed into the loss is transformed into a vectorized model with jax.vmap. The in_axes argument is a tuple whose length matches the number of arguments passed into model (in this case 2). Each tuple element indicates which dimension should be vectorized for the corresponding function argument. In our case, X is an $m times 3$ array ($m$ indicating the number of samples in the batch). Therefore, in_axes is set to (None, 0) because we don&#39;t want to vectorize over params, but we do want to vectorize the zeroth dimension of X. . As an aside, I don&#39;t like the fact that params and model are both passed as arguments to the loss function. Eventually, I&#39;d like to keep the params dictionary in some sort of model object, pass the model to the loss, and have the model implementation handle all the parameter specific stuff. This is how all of the JAX-based neural libraries (Haiku, Flax, Equinox, etc seem to work.) . Training Loop . The training loop tunes the model parameters for a specified number of epochs. For now the parameters are adjusted once per epoch, after the entire dataset is consumed by the model. . def train(data, lr=1e-2, model=linear_model, num_epochs=50, loss=mse_loss): X, y = data loss_vals = np.zeros(num_epochs) # initialize the model parameters params = {&#39;w&#39;: jnp.array([0,0,0], dtype=jnp.float32), &#39;b&#39;: 0.0} for i in range(num_epochs): loss_i, grad_params_i = loss(params, model, X, y) for key in params: params[key] -= lr*grad_params_i[key] loss_vals[i] = loss_i return loss_vals, params . X, y = generate_data(w = jnp.array([1.0, 2.0, 3.0]), b=4.0, num_samples=100) num_epochs, lr = 500, 1e-2 loss_values, params = train(data=(X, y), lr=lr, num_epochs=num_epochs, model=linear_model) . print(f&#39;weights = {params[&quot;w&quot;]}, bias = {params[&quot;b&quot;]}&#39;) . weights = [0.99990535 1.9992862 3.0005229 ], bias = 3.999452590942383 . It looks like the learned parameters are pretty close to the parameters used to generate the initial dataset. This provides a little assurance that the training loop is working properly. . Performance Curve . Let&#39;s see the trend in the loss function. . plt.rcParams[&#39;font.size&#39;] = 20 plt.figure(1, figsize=(20,5)) plt.plot(np.arange(num_epochs), loss_values, linewidth=2) plt.grid() plt.xlabel(&#39;Epochs&#39;) plt.ylabel(&#39;Loss&#39;) plt.xlim(0, num_epochs) plt.tight_layout() . Conclusion . In future JAX-related posts, I&#39;m planning on using it to build more sophisticated systems. This might include solving concocted toy problems, implementing models from journal articles, or doing something new. I realize there are plenty of fairly mature libraries out there that can do this sort of thing, but I&#39;d rather implement software that I can customize to meet my needs. Of course this doesn&#39;t mean that I won&#39;t read code and borrow ideas from other developers. .",
            "url": "https://jrreed83.github.io/technicalities/jupyter/2022/07/09/2022-JAX-LinearRegression.html",
            "relUrl": "/jupyter/2022/07/09/2022-JAX-LinearRegression.html",
            "date": " • Jul 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jrreed83.github.io/technicalities/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jrreed83.github.io/technicalities/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, I’m Joey. I work for a small, but very capable company that builds situationally aware sensor systems using ideas from communications theory, signal processing, and machine learning. . This website is an archive of technical stuff that I want to remember. Every effort will be taken to make each article clear, concise, and useful. .",
          "url": "https://jrreed83.github.io/technicalities/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jrreed83.github.io/technicalities/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}