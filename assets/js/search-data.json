{
  
    
        "post0": {
            "title": "Fashion MNIST using Linear Layers with JAX",
            "content": "Introduction . In this post, I&#39;m going to implement a basic Fashion-MNIST classifier using JAX. JAX is an array-processing library that uses Google&#39;s XLA (Accelerated Linear Algebra) compiler to generate high-performance code that can run on a variety of hardware platforms. It feels a lot like numpy, with a number of advantages including built in automatic differentiation, parallelization, and just-in-time compilation. It&#39;s built in array type is called a DeviceArray. Unlike numpy&#39;s ndarray type, elements of DeviceArrays cannot be directly mutated. The other fundamental datatype in JAX is the pytree. . The Goal . Here&#39;s one of the Fashion MNIST classifiers you e . The API design is very elegant and easy to understand. I even like the logging information provided by the call to model.fit, so much in fact that I&#39;m going to replicate the style in my training loop. . (X_train, y_train), (X_test, y_test) = tf.keras.datasets.fashion_mnist.load_data() model = tf.keras.Sequential([ tf.keras.layers.Rescaling(1/255), tf.keras.layers.Flatten(input_shape=(28,28)), tf.keras.layers.Dense(128, activation=tf.keras.activations.relu), tf.keras.layers.Dense(10, activation=tf.keras.activations.softmax) ]) model.compile( loss=tf.keras.losses.sparse_categorical_crossentropy, optimizer=tf.keras.optimizers.Adam(), metrics=[&#39;accuracy&#39;]) history = model.fit(X_train, y_train, epochs=5) . Epoch 1/5 1875/1875 [==============================] - 5s 2ms/step - loss: 0.4955 - accuracy: 0.8250 Epoch 2/5 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3726 - accuracy: 0.8643 Epoch 3/5 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3354 - accuracy: 0.8781 Epoch 4/5 1875/1875 [==============================] - 4s 2ms/step - loss: 0.3136 - accuracy: 0.8845 Epoch 5/5 1875/1875 [==============================] - 4s 2ms/step - loss: 0.2937 - accuracy: 0.8927 . Here&#39;s what I&#39;ll be able to do by the end of this post. Okay, it&#39;s nowhere near as nice as the Keras API at this point. Part of that comes from the fact that Keras tries to hide some of the details from you, while I&#39;m definitely not. . (X_train, y_train), (X_test, y_test) = tf.keras.datasets.fashion_mnist.load_data() train_dataset = Dataset(X_train, y_train) valid_dataset = Dataset(X_test, y_test) train_datasource = Dataloader(train_dataset, batchsize=32) valid_datasource = Dataloader(valid_dataset, batchsize=64) network = Sequential( rescale_image, flatten, Linear(28*28, 128), relu, Linear(128, 10), softmax ) grad_fn = jax.jit(jax.grad(lambda model, X, y: fashion_mnist_loss(model(X), y))) history = train( num_epochs=5, train_datasource=train_datasource, valid_datasource=None, optimizer=Adam(model, lr=1e-3), loss_fn=fashion_mnist_loss, model=network, grad_fn=grad_fn ) . Epoch 1/5 1874/1875 [===============================] - 3s 1.49ms/batch - loss: 0.4958 - accuracy: 0.8245 Epoch 2/5 1874/1875 [===============================] - 2s 1.40ms/batch - loss: 0.3725 - accuracy: 0.8654 Epoch 3/5 1874/1875 [===============================] - 2s 1.53ms/batch - loss: 0.3339 - accuracy: 0.8778 Epoch 4/5 1874/1875 [===============================] - 2s 1.55ms/batch - loss: 0.3080 - accuracy: 0.8869 Epoch 5/5 1874/1875 [===============================] - 2s 1.46ms/batch - loss: 0.2900 - accuracy: 0.8934 . Load Libraries . import jax import jax.numpy as jnp import numpy as np import matplotlib.pyplot as plt import tensorflow as tf import time from typing import Tuple, List, Any, Dict, Callable . Loading the Data . I really like Pytorch&#39;s approach to handling data, and could have just imported it&#39;s Dataset and Dataloader classes. My little project is simple enough that I don&#39;t need the extra features their implementation provides. . class Dataset: def __init__(self, X, y): self.X, self.y = X, y def __len__(self): return jnp.shape(self.X)[0] def __getitem__(self, i): return self.X[i,:], self.y[i] . class Dataloader: def __init__(self, dataset: Dataset, batchsize=32, shuffle=False): self.dataset = dataset self.batchsize = batchsize self.shuffle = shuffle def __iter__(self): for i in range(0, len(self.dataset), self.batchsize): yield self.dataset[i:i+self.batchsize] def __len__(self): return len(self.dataset) // self.batchsize . (X_train, y_train), _ = tf.keras.datasets.fashion_mnist.load_data() dataset = Dataset(X_train, y_train) dataloader = Dataloader(dataset) . The Model . In this section, I&#39;ll describe each component of the Sequential model being . model = Sequential( rescale_image, flatten, Linear(784, 128), relu, Linear(128, 10), softmax ) . Linear Layers . class Parametric: pass . The Linear layer defined below is very similar to implementations you&#39;d find in other libraries, except that it&#39;s explicity registered as a pytree. One way to register a user-defined class (the one used here) as a pytree is to annotate the class definition with the register_pytree_node_class decorator, provide a tree_flatten method, and a tree_unflatten class method. After going through this process, JAX will know how to transform back and forth between objects that the rest of JAX system can efficiently operate on, and objects that are specific to your application. . @jax.tree_util.register_pytree_node_class class Linear(Parametric): w: jnp.ndarray b: jnp.ndarray ni: int no: int def __init__(self, num_inputs, num_outputs, build=True, seed=1234): self.ni = num_inputs self.no = num_outputs # want to add seed as internal object if build: key = jax.random.PRNGKey(seed) self.w = jax.random.normal(key, (num_inputs, num_outputs)) * jnp.sqrt(2.0 / num_inputs) self.b = jnp.zeros(num_outputs) def __repr__(self): return f&#39;Linear(num_inputs={self.ni}, num_outputs={self.no})&#39; def __call__(self, x): return jnp.dot(x, self.w) + self.b def tree_flatten(self): return (self.w, self.b), (self.ni, self.no) @classmethod def tree_unflatten(cls, aux_data, children): layer = cls(*aux_data, build=False) layer.w, layer.b = children return layer . Functional Layers . The other layer&#39;s needed to implement the Sequential Model are Here&#39;s a class that&#39;s similar (but simpler) to a Keras Lambda layer. . @jax.tree_util.register_pytree_node_class class Function: def __init__(self, fn): self.fn = fn def __call__(self, x): return self.fn(x) def __repr__(self): return f&#39;Function({self.fn.__name__})&#39; def tree_flatten(self): return [None], self.fn @classmethod def tree_unflatten(cls, aux_data, children): return cls(aux_data) . Flatten . def flatten(x): shape = jnp.shape(x) if len(shape) == 2: # flatten a single 2D image return jnp.reshape(x, -1) elif len(shape) == 3: # x is a batch of 2D images, flatten each image batch_size = jnp.shape(x)[0] return jnp.reshape(x, (batch_size, -1)) else: raise Exception( f&#39;At the moment you can only pass 2D or 3D arrays to flatten, you passed a {len(shape)}D array&#39; ) . RELU . def relu(x): return jnp.clip(x, a_min=0) x = np.random.randn(10,10) assert np.all(np.isclose(relu(x), tf.nn.relu(x))), &#39;test failed&#39; . Softmax . def softmax(x): ex = jnp.exp(x) return ex / jnp.sum(ex, axis=-1, keepdims=True) x = np.random.randn(5, 10) assert np.all(np.isclose(softmax(x), tf.nn.softmax(x))), &#39;test failed&#39; assert np.isclose(jnp.sum(softmax(x)), jnp.shape(x)[0]) . Rescaling . def rescale_image(x): return x / 255.0 . Sequential . A Sequential model is a list of function-like each objects. Looking at the __init__ method below, each item in the list of layers must be a subclass of Parametric or Function, or be callable. Note that the order is important here because any object that implements a __call__ method is by definition callable. The other methods defined in the Sequential class definition are pretty straight-forward and consist of simply looping over the list of layers and calling that particular method (and possibly appending results). . @jax.tree_util.register_pytree_node_class class Sequential(Parametric): def __init__(self, *layers): self.layers = [] for layer in layers: if isinstance(layer, Parametric) or isinstance(layer, Function): self.layers.append(layer) elif callable(layer): self.layers.append(Function(layer)) def __call__(self, x): for layer in self.layers: x = layer(x) return x def __repr__(self): string = &#39;&#39; for layer in self.layers: string += (repr(layer) + &#39; n&#39;) return string def tree_flatten(self): aux_data, children = [], [] for layer in self.layers: params, extra_stuff = jax.tree_flatten(layer) aux_data.append(extra_stuff) children.append(params) return children, aux_data @classmethod def tree_unflatten(cls, aux_data, children): layers = [] for params, spec in zip(children, aux_data): layers.append(jax.tree_unflatten(spec, params)) return Sequential(*layers) . def fashion_mnist_mlp(): return Sequential( rescale_image, flatten, Linear(784, 128), relu, Linear(128, 10), softmax ) model = fashion_mnist_mlp() print(model) . Function(rescale_image) Function(flatten) Linear(num_inputs=784, num_outputs=128) Function(relu) Linear(num_inputs=128, num_outputs=10) Function(softmax) . The Training Loss . def cross_entropy_loss(y_true, probs): batch_size, _ = jnp.shape(probs) return -jnp.sum(jnp.log(probs + 1.0e-16) * y_true) / batch_size . y_true = np.array([[0, 1, 0], [0, 0, 1]]) y_pred = np.array([[0.05, 0.95, 0.0], [0.1, 0.8, 0.1]]) keras_cross_entropy = tf.keras.losses.CategoricalCrossentropy() assert np.all(np.isclose(cross_entropy_loss(y_true, y_pred), keras_cross_entropy(y_true, y_pred))), &#39;Not close&#39; . The Optimizers . class Optimizer: pass . class SGD(Optimizer): def __init__(self, model, lr=1e-3): self.lr = lr def step(self, model, grads): return jax.tree_map(lambda p, g: p - self.lr*g, model, grads) . class Adam(Optimizer): def __init__(self, model, lr=1e-3, v_decay=0.9, s_decay=0.999, eps=1e-7): self.lr, self.v_decay, self.s_decay, self.eps = lr, v_decay, s_decay, eps self.v = jax.tree_map(lambda x: jnp.zeros_like(x), model) self.s = jax.tree_map(lambda x: jnp.zeros_like(x), model) self.k = 0 def step(self, model, grads): lr, v_decay, s_decay, eps = self.lr, self.v_decay, self.s_decay, self.eps v, s = self.v, self.s k = self.k = self.k+1 self.v = jax.tree_map(lambda v, g: v_decay*v +(1-v_decay)*g, v, grads) self.s = jax.tree_map(lambda s, g: s_decay*s +(1-s_decay)*g*g, s, grads) v_hat = jax.tree_map(lambda v: v / (1-v_decay**k), self.v) s_hat = jax.tree_map(lambda s: s / (1-s_decay**k), self.s) new_model = jax.tree_map(lambda params, v_hat, s_hat: params - (lr*v_hat)/(jnp.sqrt(s_hat) + eps), model, v_hat, s_hat) return new_model . The Logging . def progress_bar(percentage, total=30): x = int(percentage*total) if x &lt; total: r = &#39;[&#39; + &#39;&#39;.join([&#39;=&#39;]*x) + &#39;&gt;&#39; + &#39;&#39;.join([&#39;.&#39;]*(total-x)) + &#39;]&#39; else: r = &#39;[&#39; + &#39;&#39;.join([&#39;=&#39;]*(total+1)) + &#39;]&#39; return r . The Training Loop . def train(num_epochs, train_datasource, valid_datasource, optimizer, loss_fn, grad_fn, model): history = {&#39;loss&#39;:[], &#39;accuracy&#39;:[]} if valid_datasource is not None: history = {**history, &#39;valid_loss&#39;: [], &#39;valid_accuracy&#39;: []} train_num_batches = len(train_datasource) for epoch in range(num_epochs): print(f&#39;Epoch {epoch+1}/{num_epochs}&#39;) # TRAINING PHASE train_loss_accum, train_accuracy_accum, train_batch_size = 0, 0, 0 num_steps = 0 epoch_duration = 0.0 # we know how many batches there are ... keep track for i, (X_train, y_train) in enumerate(train_datasource): # logging batch_start = time.time() num_steps += 1 # training loss and gradients for this particular batch probs = model(X_train) loss = loss_fn(probs, y_train) grads = grad_fn(model, X_train, y_train) model = optimizer.step(model, grads) # Results aggregation num_correct = jnp.sum(jnp.argmax(probs, axis=-1) == y_train) train_loss_accum += loss train_batch_size += len(y_train) train_accuracy_accum += num_correct train_accuracy = train_accuracy_accum / train_batch_size train_loss = train_loss_accum / train_num_batches # average loss per batch # Logging .... batch_duration = time.time() - batch_start epoch_duration += batch_duration log_batch_count = f&#39;{i}/{train_num_batches}&#39; log_epoch_time = f&#39;{int(epoch_duration)}s&#39; log_batch_time = f&#39;{1_000*batch_duration:.2f}ms/batch&#39; log_batch_loss = f&#39;loss: {train_loss:.4f}&#39; log_batch_accuracy = f&#39;accuracy: {train_accuracy:.4f}&#39; log_string = f&#39;{log_batch_count:&lt;10s} {progress_bar((i+1)/train_num_batches)} - {log_epoch_time:&lt;3s} {log_batch_time:&lt;5s} - {log_batch_loss:&lt;13s} - {log_batch_accuracy:&lt;20s}&#39; print(log_string, end=&#39; r&#39;) # history[&#39;loss&#39;].append(train_loss) history[&#39;accuracy&#39;].append(train_accuracy) # VALIDATION PHASE if valid_datasource is not None: valid_loss_accum, valid_accuracy_accum, valid_batch_size = 0, 0, 0 # Run validation step ... for i, (X_valid, y_valid) in enumerate(valid_datasource): num_steps += 1 probs = model(X_valid) loss = loss_fn(probs, y_valid) valid_accuracy_accum += jnp.sum(jnp.argmax(probs, axis=-1) == y_valid) valid_loss_accum += loss valid_batch_size += len(y_valid) epoch_valid_loss = valid_loss_accum / valid_batch_size epoch_valid_accuracy = valid_accuracy_accum / valid_batch_size history[&#39;loss&#39;].append(epoch_valid_loss) history[&#39;accuracy&#39;].append(epoch_valid_accuracy) # this log_string should include validation results print(log_string, end=&#39; n&#39;) return history . @jax.jit def fashion_mnist_loss(probs, y_true, num_classes=10): # average cross entropy, batch y_one_hot = jax.nn.one_hot(y_true, num_classes) return -jnp.sum(jnp.log(probs) * y_one_hot) / len(y_true) . (X_train, y_train), (X_test, y_test) = tf.keras.datasets.fashion_mnist.load_data() train_dataset = Dataset(X_train, y_train) valid_dataset = Dataset(X_test, y_test) train_datasource = Dataloader(train_dataset, batchsize=32) valid_datasource = Dataloader(valid_dataset, batchsize=64) network = Sequential( rescale_image, flatten, Linear(28*28, 128), relu, Linear(128, 10), softmax ) grad_fn = jax.jit(jax.grad(lambda model, X, y: fashion_mnist_loss(model(X), y))) history = train( num_epochs=5, train_datasource=train_datasource, valid_datasource=None, optimizer=Adam(model, lr=1e-3), loss_fn=fashion_mnist_loss, model=network, grad_fn=grad_fn ) . Epoch 1/5 1874/1875 [===============================] - 3s 1.49ms/batch - loss: 0.4958 - accuracy: 0.8245 Epoch 2/5 1874/1875 [===============================] - 2s 1.40ms/batch - loss: 0.3725 - accuracy: 0.8654 Epoch 3/5 1874/1875 [===============================] - 2s 1.53ms/batch - loss: 0.3339 - accuracy: 0.8778 Epoch 4/5 1874/1875 [===============================] - 2s 1.55ms/batch - loss: 0.3080 - accuracy: 0.8869 Epoch 5/5 1874/1875 [===============================] - 2s 1.46ms/batch - loss: 0.2900 - accuracy: 0.8934 . Keras Run . (X_train, y_train), (X_test, y_test) = tf.keras.datasets.fashion_mnist.load_data() model = tf.keras.Sequential([ tf.keras.layers.Rescaling(1/255.0), tf.keras.layers.Flatten(input_shape=(28,28)), tf.keras.layers.Dense(128, activation=tf.keras.activations.relu), tf.keras.layers.Dense(10, activation=tf.keras.activations.softmax) ]) model.compile( loss=tf.keras.losses.sparse_categorical_crossentropy, optimizer=tf.keras.optimizers.Adam(), metrics=[&#39;accuracy&#39;]) history = model.fit(X_train, y_train, epochs=5) . Epoch 1/5 1875/1875 [==============================] - 2s 793us/step - loss: 0.4952 - accuracy: 0.8253 Epoch 2/5 1875/1875 [==============================] - 2s 803us/step - loss: 0.3735 - accuracy: 0.8652 Epoch 3/5 1875/1875 [==============================] - 2s 807us/step - loss: 0.3321 - accuracy: 0.8799 Epoch 4/5 1875/1875 [==============================] - 2s 920us/step - loss: 0.3088 - accuracy: 0.8855 Epoch 5/5 1875/1875 [==============================] - 2s 943us/step - loss: 0.2916 - accuracy: 0.8928 . Next Time . Implement convolutional layers and train a convolutional neural network | Add a callback system to simplify the training loop | Show validation results | Evaluate performance on test set |",
            "url": "https://jrreed83.github.io/technicalities/jupyter/2022/07/09/2022-JAX-MNIST.html",
            "relUrl": "/jupyter/2022/07/09/2022-JAX-MNIST.html",
            "date": " • Jul 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Linear Regression with JAX",
            "content": "In this notebook, JAX will be used to solve a basic linear regression problem: given inputs $X$ and targets $y$, find the weights $w$ and bias $b$ that minimizes the loss function. . $$ ell (w, b) = | X w + b - y | ^ 2 $$In the process of solving this problem, I&#39;ll slowly build up a basic neural network library. Let me say upfront that I&#39;m new to JAX, but it looks like a very elegant library. . import jax import jax.numpy as jnp import numpy as np import matplotlib.pyplot as plt . Generate Data . The first thing I need to to is generate some mock data satisfying a linear hyperplane . $$ y = x cdot w + b $$Here&#39;s a little utility function we can use for this purpose. . def generate_data(w, b, num_samples = 10): seed = 3551 key = jax.random.PRNGKey(seed) X = jax.random.normal(key, (num_samples, 3)) y = jnp.dot(X, w) + b return X, y . Model Definition . We use a simple linear model, with the parameters (weights and biases) stored in a simple python dictionary, named params. Although it may not be clear in the function definition, the x argument should be interpreted as a single input sample, rather than a mini-batch of samples. Applying the model to a batch of samples will be handled in the loss function below. . def linear_model(params, x): w = params[&#39;w&#39;] b = params[&#39;b&#39;] return jnp.dot(x, w) + b . Loss Function . The loss function takes the current set of parameters, the model, and the data and calculates the distance between the model predictions and the targets. . @jax.value_and_grad def mse_loss(params, model, X, y): l = jax.vmap(model, in_axes=(None, 0))(params, X) return jnp.mean((l - y)**2) . By decorating the loss with @jax.value_and_grad annotation, we&#39;re telling the JAX system that the value and gradient should be returned. Note also that the model passed into the loss is transformed into a vectorized model with jax.vmap. The in_axes argument is a tuple whose length matches the number of arguments passed into model (in this case 2). Each tuple element indicates which dimension should be vectorized for the corresponding function argument. In our case, X is an $m times 3$ array ($m$ indicating the number of samples in the batch). Therefore, in_axes is set to (None, 0) because we don&#39;t want to vectorize over params, but we do want to vectorize the zeroth dimension of X. . As an aside, I don&#39;t like the fact that params and model are both passed as arguments to the loss function. Eventually, I&#39;d like to keep the params dictionary in some sort of model object, pass the model to the loss, and have the model implementation handle all the parameter specific stuff. This is how all of the JAX-based neural libraries (Haiku, Flax, Equinox, etc seem to work.) . Training Loop . The training loop tunes the model parameters for a specified number of epochs. For now the parameters are adjusted once per epoch, after the entire dataset is consumed by the model. . def train(data, lr=1e-2, model=linear_model, num_epochs=50, loss=mse_loss): X, y = data loss_vals = np.zeros(num_epochs) # initialize the model parameters params = {&#39;w&#39;: jnp.array([0,0,0], dtype=jnp.float32), &#39;b&#39;: 0.0} for i in range(num_epochs): loss_i, grad_params_i = loss(params, model, X, y) for key in params: params[key] -= lr*grad_params_i[key] loss_vals[i] = loss_i return loss_vals, params . X, y = generate_data(w = jnp.array([1.0, 2.0, 3.0]), b=4.0, num_samples=100) num_epochs, lr = 500, 1e-2 loss_values, params = train(data=(X, y), lr=lr, num_epochs=num_epochs, model=linear_model) . print(f&#39;weights = {params[&quot;w&quot;]}, bias = {params[&quot;b&quot;]}&#39;) . weights = [0.99990535 1.9992862 3.0005229 ], bias = 3.999452590942383 . It looks like the learned parameters are pretty close to the parameters used to generate the initial dataset. This provides a little assurance that the training loop is working properly. . Performance Curve . Let&#39;s see the trend in the loss function. . plt.rcParams[&#39;font.size&#39;] = 20 plt.figure(1, figsize=(20,5)) plt.plot(np.arange(num_epochs), loss_values, linewidth=2) plt.grid() plt.xlabel(&#39;Epochs&#39;) plt.ylabel(&#39;Loss&#39;) plt.xlim(0, num_epochs) plt.tight_layout() . Conclusion . In future JAX-related posts, I&#39;m planning on using it to build more sophisticated systems. This might include solving concocted toy problems, implementing models from journal articles, or doing something new. I realize there are plenty of fairly mature libraries out there that can do this sort of thing, but I&#39;d rather implement software that I can customize to meet my needs. Of course this doesn&#39;t mean that I won&#39;t read code and borrow ideas from other developers. .",
            "url": "https://jrreed83.github.io/technicalities/jupyter/2022/07/09/2022-JAX-LinearRegression.html",
            "relUrl": "/jupyter/2022/07/09/2022-JAX-LinearRegression.html",
            "date": " • Jul 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Convolutional Layer",
            "content": "Introduction . The purpose of this post is to check my understanding of 2D convolutional and pooling layers. I&#39;ll use Keras to create small Conv2D and MaxPool2D layers, apply them to a randomly . Let&#39;s Start . import numpy as np import tensorflow as tf . model = tf.keras.models.Sequential([ tf.keras.layers.Conv2D(filters=2, kernel_size=(2, 2)), tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)) ]) . input_image = np.random.randn(4,4,3) input_batch = input_image[None,:,:,:] features = model(input_batch) print(f&#39;Feature Mapping: {input_batch.shape} -&gt; {features.shape}&#39;) . Feature Mapping: (1, 4, 4, 3) -&gt; (1, 1, 1, 2) . According to the Keras documentation, . def get_layer_outputs(model, x): outputs = [] model_input = model.input for layer in model.layers: layer_model = tf.keras.Model(inputs=model_input, outputs=layer.output) y = layer_model(x) outputs.append(y.numpy()) return outputs . get_layer_outputs(model, input_batch) . [array([[[[ 0.5709658 , -0.9792538 ], [-1.0654193 , -0.06757978], [ 0.5732696 , -0.03206941]], [[ 1.7229191 , -0.01773215], [-1.194443 , 1.0171514 ], [ 0.42115533, 0.18736929]], [[ 1.0003719 , 0.9343733 ], [-0.83191144, -0.82429725], [ 1.4794707 , 0.18596372]]]], dtype=float32), array([[[[1.7229191, 1.0171514]]]], dtype=float32)] . Convolutional Layer . The first function argument is the number of filters and the second argument is the shape of the kernel. . conv_layer = tf.keras.layers.Conv2D(filters=2, kernel_size=(2, 2)) . Arrays fed to layer must be a 4D tensor where the first axis is the batch size, the second axis is the width, the third axis is the height, and the fourth axis is the number of input channels. Here we generate a batch containing a single $4 times4$ array with 3-channels, pass it to conv_layer and look at the shape of output features. . input_image = np.random.randn(1,4,4,3) features = conv_layer(input_batch) print(f&#39;Feature Mapping: {input_image.shape} -&gt; {features.shape}&#39;) . Feature Mapping: (1, 4, 4, 3) -&gt; (1, 3, 3, 2) . This means that there&#39;s still one image in the batch, but it shrunk from $4 times4$ to $3 times3$. This resizing effect occurred because unless the input is padded, convolution always reduces the input by a function of it&#39;s kernel (or filter size). Also notice that the number of channels went from 3 to 2. In general, the number of output channels will match the filters argument passed in to the Conv2D constructor. . kernels, biases = conv_layer.get_weights() . kernels, biases = model.layers[0].get_weights() . print(f&#39;kernels shape = {kernels.shape}, biases shape ={biases.shape}&#39;) . kernels shape = (2, 2, 3, 2), biases shape =(2,) . def conv2d(x, kernel): xm, xn = x.shape km, kn = kernel.shape y = np.zeros((xm - km + 1, xn - kn + 1)) ym, yn = y.shape for i in range(ym): for j in range(yn): y[i, j] = np.sum(kernel * x[i:i+km, j:j+kn]) return y . Here&#39;s a faily inefficient way to duplicate the evaluation of the conv_layer defined in above. . def convolve(input_image, kernels, biases): width, height, input_chans = input_image.shape km, kn, _, output_chans = kernels.shape w = width - km + 1 h = height - kn + 1 features = np.zeros((w, h, output_chans)) for out_chan in range(output_chans): y = np.zeros((w, h)) for in_chan in range(input_chans): y += conv2d( input_image[:,:,in_chan], kernels[:,:,in_chan, out_chan], ) # one bias per output feature features[:,:,out_chan] = y + biases[out_chan] return features . features_ = convolve(input_image, kernels, biases)[None,:,:,:] . features_ . array([[[[ 0.57096572, -0.97925384], [-1.06541922, -0.0675798 ], [ 0.57326961, -0.03206957]], [[ 1.72291908, -0.01773216], [-1.19444309, 1.01715131], [ 0.42115538, 0.18736924]], [[ 1.00037184, 0.93437332], [-0.83191143, -0.82429726], [ 1.47947074, 0.18596377]]]]) . assert np.all(np.isclose(feature_maps, features_)) . Max Pooling . pooling_layer = tf.keras.layers.MaxPool2D(pool_size=(2,2), strides=(2,2)) . yy = pooling_layer(feature_maps) print(f&#39;{feature_maps.shape} -&gt; {yy.shape}&#39;) . (1, 3, 3, 2) -&gt; (1, 1, 1, 2) . yy . &lt;tf.Tensor: shape=(1, 1, 1, 2), dtype=float32, numpy=array([[[[0.9654248, 1.2988867]]]], dtype=float32)&gt; . print(feature_maps) . tf.Tensor( [[[[ 0.89900464 -1.0616233 ] [-0.10247962 1.2988867 ] [-0.8515937 0.6712394 ]] [[ 0.9654248 0.23607667] [-0.43404913 0.27193436] [-0.5712364 -0.73882663]] [[ 0.6847748 -0.8419535 ] [ 0.46285468 0.7197448 ] [-1.3353215 0.47066653]]]], shape=(1, 3, 3, 2), dtype=float32) . print(yy) . tf.Tensor( [[[[ 0.9654248 1.2988867 ] [-0.10247962 1.2988867 ]] [[ 0.9654248 0.7197448 ] [ 0.46285468 0.7197448 ]]]], shape=(1, 2, 2, 2), dtype=float32) . print(feature_maps[0,:,:,1]) . tf.Tensor( [[-1.0616233 1.2988867 0.6712394 ] [ 0.23607667 0.27193436 -0.73882663] [-0.8419535 0.7197448 0.47066653]], shape=(3, 3), dtype=float32) . yy[0,:,:,1] . &lt;tf.Tensor: shape=(2, 2), dtype=float32, numpy= array([[1.2988867, 1.2988867], [0.7197448, 0.7197448]], dtype=float32)&gt; . input_batch.shape . (1, 4, 4, 3) . list(range(0,10,2)) . [0, 2, 4, 6, 8] . def pool2D(x, pool_size=(2,2), strides=(1,1), fn=np.max): xm, xn = x.shape pm, pn = pool_size sm, sn = strides ym, yn = (xm-pm+1) // sm, (xn-pn+1) // sn y = np.zeros((ym, yn)) ii = 0 for i in range(0, xm-pm+1, sm): jj = 0 for j in range(0, xn-pn+1, sn): y[ii,jj] = fn(x[i:i+pm,j:j+pn]) jj += 1 ii += 1 return y . ## xm, xn = x.shape # pm, pn = pool_size # sm, sn = strides # # y = np.zeros((xm - pm + 1, xn - pn + 1)) # # ym, yn = y.shape # # for i in range(0, ym): # for j in range(0, yn): # y[i,j] = np.max(x[i:i+pm,j:j+pn]) # # return y . x = np.random.randn(3,3) b = pool2D(x, strides=(2,2)) print(a) print(b) print(x) . [[-0.36715236 0.09317793] [-0.36715236 -0.06301992]] [[0.98810509]] [[-0.92430295 -0.55469247 -0.59627284] [ 0.98810509 -0.64934654 0.29590853] [ 1.21270553 0.98248372 -0.38071894]] . def pooling(features, pool_size=(2,2), strides=(2,2)): px, py = pool_size sm, sn = strides width, height, chans = features.shape m, n = (width - px + 1) // sm, (height - py + 1) // sn features_ = np.zeros((m, n, chans)) # Note that we&#39;re not changing the number of features for chan in range(chans): features_[:,:,chan] = pool2D(features[:,:,chan], pool_size, strides) return features_ . pooling(feature_maps[0,:,:,:]) . array([[[ 1.3011235 , -0.24245605]]]) .",
            "url": "https://jrreed83.github.io/technicalities/jupyter/2022/07/09/2022-Convolutional-Layers.html",
            "relUrl": "/jupyter/2022/07/09/2022-Convolutional-Layers.html",
            "date": " • Jul 9, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jrreed83.github.io/technicalities/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jrreed83.github.io/technicalities/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, I’m Joey. I work for a small, but very capable company that builds situationally aware sensor systems using ideas from communications theory, signal processing, and machine learning. . This website is an archive of technical stuff that I want to remember. Every effort will be taken to make each article clear, concise, and useful. .",
          "url": "https://jrreed83.github.io/technicalities/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jrreed83.github.io/technicalities/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}