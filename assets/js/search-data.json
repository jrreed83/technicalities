{
  
    
        "post0": {
            "title": "Fashion MNIST using Linear Layers with JAX",
            "content": "import jax import jax.numpy as jnp import numpy as np import matplotlib.pyplot as plt import tensorflow as tf from typing import Tuple, List, Any, Dict, Callable . PyTorch / fast.ai like Data API . class Dataset: def __init__(self, X, y): self.X, self.y = X, y def __len__(self): return jnp.shape(self.X)[0] def __getitem__(self, i): return self.X[i,:], self.y[i] . class Dataloader: def __init__(self, dataset: Dataset, batchsize=32, shuffle=False): self.dataset = dataset self.batchsize = batchsize self.shuffle = shuffle def __iter__(self): for i in range(0, len(self.dataset), self.batchsize): yield self.dataset[i:i+self.batchsize] . fashion_mnist = tf.keras.datasets.fashion_mnist (X_train, y_train), (X_test, y_test) = fashion_mnist.load_data() X_train, X_test = X_train / 255.0, X_test / 255.0 . fashion_mnist.load_data?? . Signature: fashion_mnist.load_data() Source: @keras_export(&#39;keras.datasets.fashion_mnist.load_data&#39;) def load_data(): &#34;&#34;&#34;Loads the Fashion-MNIST dataset. This is a dataset of 60,000 28x28 grayscale images of 10 fashion categories, along with a test set of 10,000 images. This dataset can be used as a drop-in replacement for MNIST. The classes are: | Label | Description | |:--:|-| | 0 | T-shirt/top | | 1 | Trouser | | 2 | Pullover | | 3 | Dress | | 4 | Coat | | 5 | Sandal | | 6 | Shirt | | 7 | Sneaker | | 8 | Bag | | 9 | Ankle boot | Returns: Tuple of NumPy arrays: `(x_train, y_train), (x_test, y_test)`. **x_train**: uint8 NumPy array of grayscale image data with shapes `(60000, 28, 28)`, containing the training data. **y_train**: uint8 NumPy array of labels (integers in range 0-9) with shape `(60000,)` for the training data. **x_test**: uint8 NumPy array of grayscale image data with shapes (10000, 28, 28), containing the test data. **y_test**: uint8 NumPy array of labels (integers in range 0-9) with shape `(10000,)` for the test data. Example: python (x_train, y_train), (x_test, y_test) = fashion_mnist.load_data() assert x_train.shape == (60000, 28, 28) assert x_test.shape == (10000, 28, 28) assert y_train.shape == (60000,) assert y_test.shape == (10000,) License: The copyright for Fashion-MNIST is held by Zalando SE. Fashion-MNIST is licensed under the [MIT license]( https://github.com/zalandoresearch/fashion-mnist/blob/master/LICENSE). &#34;&#34;&#34; dirname = os.path.join(&#39;datasets&#39;, &#39;fashion-mnist&#39;) base = &#39;https://storage.googleapis.com/tensorflow/tf-keras-datasets/&#39; files = [ &#39;train-labels-idx1-ubyte.gz&#39;, &#39;train-images-idx3-ubyte.gz&#39;, &#39;t10k-labels-idx1-ubyte.gz&#39;, &#39;t10k-images-idx3-ubyte.gz&#39; ] paths = [] for fname in files: paths.append(get_file(fname, origin=base + fname, cache_subdir=dirname)) with gzip.open(paths[0], &#39;rb&#39;) as lbpath: y_train = np.frombuffer(lbpath.read(), np.uint8, offset=8) with gzip.open(paths[1], &#39;rb&#39;) as imgpath: x_train = np.frombuffer( imgpath.read(), np.uint8, offset=16).reshape(len(y_train), 28, 28) with gzip.open(paths[2], &#39;rb&#39;) as lbpath: y_test = np.frombuffer(lbpath.read(), np.uint8, offset=8) with gzip.open(paths[3], &#39;rb&#39;) as imgpath: x_test = np.frombuffer( imgpath.read(), np.uint8, offset=16).reshape(len(y_test), 28, 28) return (x_train, y_train), (x_test, y_test) File: ~/anaconda3/lib/python3.8/site-packages/keras/datasets/fashion_mnist.py Type: function . dataset = Dataset(X_train, y_train) . dataloader = Dataloader(dataset) . for X, y in dataloader: print(X.shape, y.shapeodel API . class Module: pass . Linear Layer . class Linear(Module): w: jnp.ndarray b: jnp.ndarray ni: int no: int def __init__(self, num_inputs, num_outputs, seed=1234): self.ni = num_inputs self.no = num_outputs key = jax.random.PRNGKey(seed) self.w = jax.random.normal(key, (num_inputs, num_outputs)) * jnp.sqrt(2.0 / num_inputs) self.b = jnp.zeros(num_outputs) def __call__(self, x): return jnp.dot(x, self.w) + self.b def params(self): return {&#39;b&#39;: self.b, &#39;w&#39;: self.w} . l = Linear(2, 1) x = np.random.randn(2) y = l(x) print(y) . WARNING:absl:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.) . [-1.4597868] . def mse(model, X, y): preds = jax.vmap(model)(X) return jnp.mean((preds - y)**2) . print(mse(l, x, 2.0)) print(mse(l, np.random.randn(10, 2), np.random.randn(10))) . 4.4841824 1.44302 . mse_grad = jax.grad(mse) mse_grad(l, x, 2.0) . TypeError Traceback (most recent call last) /tmp/ipykernel_126757/2465860446.py in &lt;module&gt; 1 mse_grad = jax.grad(mse) -&gt; 2 mse_grad(l, x, 2.0) [... skipping hidden 5 frame] ~/anaconda3/lib/python3.8/site-packages/jax/_src/api.py in _check_arg(arg) 2972 def _check_arg(arg): 2973 if not (isinstance(arg, core.Tracer) or _valid_jaxtype(arg)): -&gt; 2974 raise TypeError(f&#34;Argument &#39;{arg}&#39; of type {type(arg)} is not a valid JAX type.&#34;) 2975 2976 # TODO(mattjj,necula): this duplicates code in core.valid_jaxtype, but one TypeError: Argument &#39;&lt;__main__.Linear object at 0x7f6b801ebb80&gt;&#39; of type &lt;class &#39;__main__.Linear&#39;&gt; is not a valid JAX type. . To get this to work, the Linear class must be registered as a pytree. . @jax.tree_util.register_pytree_node_class class Linear(Module): w: jnp.ndarray b: jnp.ndarray ni: int no: int def __init__(self, num_inputs, num_outputs, build=True, seed=1234): self.ni = num_inputs self.no = num_outputs # want to add seed as internal object if build: key = jax.random.PRNGKey(seed) self.w = jax.random.normal(key, (num_inputs, num_outputs)) * jnp.sqrt(2.0 / num_inputs) self.b = jnp.zeros(num_outputs) def merge(self, params): self.w, self.b = params def __repr__(self): return f&#39;Linear(num_inputs={self.ni}, num_outputs={self.no})&#39; def __call__(self, x): return jnp.dot(x, self.w) + self.b def params(self): return {&#39;b&#39;: self.b, &#39;w&#39;: self.w} def tree_flatten(self): return [self.w, self.b], [self.ni, self.no] @classmethod def tree_unflatten(cls, aux_data, children): layer = cls(*aux_data, build=False) layer.merge(params=children) return layer . lin = Linear(2, 1) . params, extra_stuff = lin.tree_flatten() . lin2 = Linear.tree_unflatten(extra_stuff, params) . print(lin.w) print(lin2.w) . [[ 0.43957582] [-0.26563603]] [[ 0.43957582] [-0.26563603]] . @jax.jit @jax.value_and_grad def mse(model, X, y): preds = jax.vmap(model)(X) return jnp.mean((preds - y)**2) . X = np.random.randn(10, 2) y = np.random.randn(10) loss, g_loss = mse(lin, X, y) print(loss, g_loss) . 1.5986859 Linear(num_inputs=2, num_outputs=1) . g_loss.__dict__ . {&#39;ni&#39;: 2, &#39;no&#39;: 1, &#39;w&#39;: DeviceArray([[ 1.0373731 ], [-0.40601766]], dtype=float32), &#39;b&#39;: DeviceArray([-0.7894485], dtype=float32)} . jax.tree_util.tree_flatten(g_loss) . ([DeviceArray([[ 1.0373731 ], [-0.40601766]], dtype=float32), DeviceArray([-0.7894485], dtype=float32)], PyTreeDef(CustomNode(&lt;class &#39;__main__.Linear&#39;&gt;[[2, 1]], [*, *]))) . locals()[&#39;Linear&#39;].__class__ . type . Helper Functions . def flatten(x: jnp.ndarray): return jnp.reshape(x, -1) . def relu(x: jnp.ndarray): return jnp.clip(x, a_min=0) . x = np.random.randn(10,10) assert jnp.all(jnp.isclose(relu(x), jax.nn.relu(x))), &#39;test failed&#39; . def softmax(x: jnp.ndarray): ex = jnp.exp(x) return ex / jnp.sum(ex) . x = np.random.randn(10) assert jnp.all(jnp.isclose(softmax(x), jax.nn.softmax(x))), &#39;test failed&#39; . _registry = { flatten.__name__: flatten, softmax.__name__: softmax, relu.__name__: relu } . Sequential Module . @jax.tree_util.register_pytree_node_class class Sequential(Module): layers: List def __init__(self, *layers): self.layers = layers def __call__(self, x): for layer in self.layers: x = layer(x) return x def tree_flatten(self): aux_data, children = [], [] for layer in self.layers: if isinstance(layer, Module): params, extra_stuff = layer.tree_flatten() aux_data.append([layer.__class__.__name__] + extra_stuff) children.append(params) elif callable(layer): # a layer function that doesn&#39;t have any paramerers ... aux_data.append(layer.__name__) children.append(None) return children, aux_data @classmethod def tree_unflatten(cls, aux_data, children): layers = [] # Need a bettern way to unflatten a sequential structure, more flexible at least... for params, spec in zip(children, aux_data): if isinstance(spec, list): layer_name, *args = spec if layer_name == &#39;Linear&#39;: layers.append(Linear.tree_unflatten(args, params)) elif isinstance(spec, str) and spec in _registry: layers.append(_registry[spec]) return Sequential(*layers) . model = Sequential( flatten, Linear(784, 128), relu, Linear(128, 10), softmax ) params, extra_stuff = model.tree_flatten() print(extra_stuff) print(params) . [&#39;flatten&#39;, [&#39;Linear&#39;, 784, 128], &#39;relu&#39;, [&#39;Linear&#39;, 128, 10], &#39;softmax&#39;] [None, [DeviceArray([[-0.00503162, -0.11710759, 0.05479915, ..., -0.07662067, -0.03762808, 0.037621 ], [-0.02311066, 0.00427538, 0.06703123, ..., 0.05820996, -0.03371886, -0.0653995 ], [-0.03936624, 0.08184296, -0.00103856, ..., -0.02543773, 0.00404367, 0.10533019], ..., [-0.05674443, 0.01220774, -0.04277196, ..., 0.00793091, -0.03246848, 0.05214054], [-0.10229313, -0.04473471, -0.05902693, ..., -0.026743 , 0.01399903, -0.02305236], [ 0.02624378, -0.040582 , 0.04346804, ..., -0.0069246 , 0.04329436, 0.07048796]], dtype=float32), DeviceArray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)], None, [DeviceArray([[-0.01355871, 0.03681665, -0.03254633, ..., 0.08429167, -0.23054102, -0.17765395], [ 0.10870937, -0.09912576, -0.15005781, ..., -0.02846045, -0.17202236, 0.05921352], [-0.04855632, -0.1232295 , -0.08703142, ..., -0.01804219, -0.05857573, -0.05169024], ..., [-0.04422821, 0.02535993, -0.09997344, ..., -0.15334168, -0.07498863, -0.08412767], [-0.10158557, 0.035592 , -0.01597822, ..., -0.17800951, 0.01484985, -0.03984371], [ 0.10285417, -0.07429263, -0.03157486, ..., -0.09978219, 0.09220438, -0.01050255]], dtype=float32), DeviceArray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)], None] . model(np.random.randn(28, 28)) . DeviceArray([0.24745142, 0.0232116 , 0.00846777, 0.05969231, 0.04158318, 0.01553843, 0.33251768, 0.06073404, 0.20046304, 0.01034052], dtype=float32) . model2 = Sequential.tree_unflatten(extra_stuff, params) . model2.tree_flatten() . ([None, [DeviceArray([[-0.00503162, -0.11710759, 0.05479915, ..., -0.07662067, -0.03762808, 0.037621 ], [-0.02311066, 0.00427538, 0.06703123, ..., 0.05820996, -0.03371886, -0.0653995 ], [-0.03936624, 0.08184296, -0.00103856, ..., -0.02543773, 0.00404367, 0.10533019], ..., [-0.05674443, 0.01220774, -0.04277196, ..., 0.00793091, -0.03246848, 0.05214054], [-0.10229313, -0.04473471, -0.05902693, ..., -0.026743 , 0.01399903, -0.02305236], [ 0.02624378, -0.040582 , 0.04346804, ..., -0.0069246 , 0.04329436, 0.07048796]], dtype=float32), DeviceArray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)], None, [DeviceArray([[-0.01355871, 0.03681665, -0.03254633, ..., 0.08429167, -0.23054102, -0.17765395], [ 0.10870937, -0.09912576, -0.15005781, ..., -0.02846045, -0.17202236, 0.05921352], [-0.04855632, -0.1232295 , -0.08703142, ..., -0.01804219, -0.05857573, -0.05169024], ..., [-0.04422821, 0.02535993, -0.09997344, ..., -0.15334168, -0.07498863, -0.08412767], [-0.10158557, 0.035592 , -0.01597822, ..., -0.17800951, 0.01484985, -0.03984371], [ 0.10285417, -0.07429263, -0.03157486, ..., -0.09978219, 0.09220438, -0.01050255]], dtype=float32), DeviceArray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)], None], [&#39;flatten&#39;, [&#39;Linear&#39;, 784, 128], &#39;relu&#39;, [&#39;Linear&#39;, 128, 10], &#39;softmax&#39;]) . X = np.random.randn(10, 28, 28) y = jax.vmap(model)(X) print(y) . [[0.18219435 0.0288466 0.08972018 0.04580158 0.03094671 0.15161341 0.13047464 0.1996091 0.04998811 0.09080528] [0.21781811 0.19041373 0.04586045 0.02944165 0.04131059 0.14847653 0.14403759 0.01657318 0.10250735 0.06356081] [0.0913539 0.03204991 0.00621432 0.00281485 0.00478983 0.26314914 0.28993967 0.01488724 0.20624228 0.08855885] [0.08637979 0.02319437 0.02073215 0.27249578 0.017279 0.12466064 0.25296152 0.01484643 0.10506434 0.08238598] [0.01162764 0.01259067 0.05375895 0.4700068 0.0066564 0.05829709 0.11621077 0.02655041 0.15631145 0.08798981] [0.04634016 0.22555009 0.08186731 0.01344233 0.03639027 0.3018414 0.11826753 0.02965728 0.07825199 0.06839168] [0.22286822 0.07548939 0.02164324 0.03841386 0.01069496 0.2535701 0.17003557 0.04174198 0.04416189 0.12138066] [0.30497798 0.01807475 0.02036336 0.18955673 0.05524043 0.17666912 0.0173182 0.01110036 0.05980157 0.14689754] [0.01721036 0.05527912 0.00589779 0.02485557 0.06157751 0.12263539 0.0881054 0.00754352 0.09861352 0.5182818 ] [0.14766875 0.08021237 0.0195124 0.02822899 0.01128606 0.25306928 0.1162864 0.06565929 0.04340101 0.23467542]] . Cross-entropy Loss . jnp.log(10) . DeviceArray(2.3025851, dtype=float32, weak_type=True) . @jax.value_and_grad def cross_entropy(model, X, y, num_cats=10): y_one_hot = jax.nn.one_hot(y, num_cats) log_softmax = jnp.log(jax.vmap(model)(X)) return -jnp.mean(log_softmax * y_one_hot) . value, grads = cross_entropy(model, np.random.randn(5, 28, 28), [1,0,1,1,0]) print(value) . 0.3070485 . jax.tree_map(lambda x: print(x.shape), grads) . (784, 128) (128,) (128, 10) (10,) . &lt;__main__.Sequential at 0x7f6b5c622610&gt; . mm = jax.tree_util.tree_map(lambda x: print(x.shape), model) . (784, 128) (128,) (128, 10) (10,) . updated_model = jax.tree_util.tree_map(lambda p, g: p - 1e-3*g, model, grads) . assert jnp.all(jnp.isclose(updated_model.layers[1].w, model.layers[1].w - 1e-3*grads.layers[1].w)) . Optimizer . class Optimizer: pass . class SGD(Optimizer): def __init__(self, lr=1e-3): self.lr = lr def step(self, model, grads): return jax.tree_util.tree_map(lambda p, g: p - self.lr*g, model, grads) . Metrics . x . Training Loop . dataset = Dataset(X_train, y_train) dataloader = Dataloader(dataset, batchsize=64) opt = SGD() num_epochs, lr = 10, 1e-3 for i in range(num_epochs): epoch_correct_prediction_count = 0 epoch_loss = 0.0 num_training_examples = 0 for X, y in dataloader: # evaluate the model loss, grad = cross_entropy(model, X, y) # update the model using gradient descent model = opt.step(model, grad) #model = jax.tree_util.tree_map(lambda p, g: p - lr*g, model, grad) # metrics y_preds = jnp.argmax(jax.vmap(model)(X), axis=1) correct = jnp.sum(y_preds == y) epoch_correct_prediction_count += correct epoch_loss += loss minibatch_size = jnp.shape(X)[0] num_training_examples += minibatch_size epoch_accuracy = epoch_correct_prediction_count / num_training_examples epoch_loss = epoch_loss / num_training_examples print(f&#39;Epoch {i}: {100*epoch_accuracy:.2f}&#39;) . AttributeError Traceback (most recent call last) /tmp/ipykernel_126757/2425608721.py in &lt;module&gt; 9 for X, y in dataloader: 10 # evaluate the model &gt; 11 loss, grad = cross_entropy(model, X, y) 12 13 # update the model using gradient descent [... skipping hidden 3 frame] /tmp/ipykernel_126757/306837443.py in tree_flatten(self) 17 elif callable(layer): 18 # a layer function that doesn&#39;t have any paramerers ... &gt; 19 aux_data.append(layer.__name__) 20 children.append(None) 21 return children, aux_data AttributeError: &#39;Linear&#39; object has no attribute &#39;__name__&#39; . X = np.random.randn(2, 28, 28) y = np.array([0, 1]) o = jax.vmap(model)(X) print(o) y_preds = jnp.argmax(o, axis=1) print(y_preds) accuracy = jnp.sum(y_preds == y) print(accuracy) . [[0.01349435 0.050846 0.00470727 0.0737321 0.01404345 0.08124171 0.32983273 0.09614405 0.11126529 0.22469307] [0.00822283 0.01901213 0.01239796 0.01414352 0.01985135 0.07420428 0.08907535 0.00788129 0.6057198 0.14949153]] [6 8] 0 . Performance Curve . Let&#39;s see the trend in the loss function. . Conclusion . X = np.random.randn(10, 3) w = np.random.randn(5, 3) . np.dot(X, np.transpose(w)) . array([[ 0.95615652, -0.60910943, 0.47719404, 0.50628421, -0.57886369], [ 3.09498684, 1.70024379, -1.01957485, 2.25813896, -0.37952626], [-3.67871561, -0.1351104 , 0.04294664, -1.84479421, 0.98852387], [-1.00596024, 0.46315551, 0.67104569, 3.13116358, -1.09329311], [ 2.07878921, 1.88358723, -1.42939824, 0.84352964, 0.39912581], [ 2.91327168, -1.07647233, 0.73089571, 1.0445742 , -1.1687821 ], [ 1.03321149, 0.51671102, 0.70734573, 4.30933842, -1.72017219], [-2.73799462, -1.54710401, 1.83484434, 1.17423297, -1.08464385], [-1.6715637 , -2.74092988, 1.91974295, -1.18807747, -0.68628707], [ 1.21170605, 0.15311168, -0.1815407 , 0.30359954, -0.13915325]]) . def lin(x): return jnp.dot(w, x) yy = jax.vmap(lin)(X) print(yy) . [[ 0.9561565 -0.6091094 0.47719404 0.50628424 -0.5788637 ] [ 3.0949867 1.7002438 -1.0195749 2.258139 -0.37952614] [-3.6787155 -0.13511032 0.04294658 -1.8447943 0.9885239 ] [-1.0059603 0.46315545 0.67104566 3.1311636 -1.093293 ] [ 2.0787892 1.8835871 -1.4293982 0.8435297 0.39912578] [ 2.9132717 -1.0764723 0.7308957 1.044574 -1.1687821 ] [ 1.0332114 0.516711 0.7073457 4.309338 -1.7201722 ] [-2.7379947 -1.547104 1.8348444 1.174233 -1.0846438 ] [-1.6715636 -2.7409298 1.919743 -1.1880776 -0.686287 ] [ 1.2117062 0.15311167 -0.1815407 0.3035995 -0.13915324]] .",
            "url": "https://jrreed83.github.io/technicalities/jupyter/2022/07/09/2022-JAX-MNIST.html",
            "relUrl": "/jupyter/2022/07/09/2022-JAX-MNIST.html",
            "date": " • Jul 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Linear Regression with JAX",
            "content": "In this notebook, JAX will be used to solve a basic linear regression problem: given inputs $X$ and targets $y$, find the weights $w$ and bias $b$ that minimizes the loss function. . $$ ell (w, b) = | X w + b - y | ^ 2 $$In the process of solving this problem, I&#39;ll slowly build up a basic neural network library. Let me say upfront that I&#39;m new to JAX, but it looks like a very elegant library. . import jax import jax.numpy as jnp import numpy as np import matplotlib.pyplot as plt . Generate Data . The first thing I need to to is generate some mock data satisfying a linear hyperplane . $$ y = x cdot w + b $$Here&#39;s a little utility function we can use for this purpose. . def generate_data(w, b, num_samples = 10): seed = 3551 key = jax.random.PRNGKey(seed) X = jax.random.normal(key, (num_samples, 3)) y = jnp.dot(X, w) + b return X, y . Model Definition . We use a simple linear model, with the parameters (weights and biases) stored in a simple python dictionary, named params. Although it may not be clear in the function definition, the x argument should be interpreted as a single input sample, rather than a mini-batch of samples. Applying the model to a batch of samples will be handled in the loss function below. . def linear_model(params, x): w = params[&#39;w&#39;] b = params[&#39;b&#39;] return jnp.dot(x, w) + b . Loss Function . The loss function takes the current set of parameters, the model, and the data and calculates the distance between the model predictions and the targets. . @jax.value_and_grad def mse_loss(params, model, X, y): l = jax.vmap(model, in_axes=(None, 0))(params, X) return jnp.mean((l - y)**2) . By decorating the loss with @jax.value_and_grad annotation, we&#39;re telling the JAX system that the value and gradient should be returned. Note also that the model passed into the loss is transformed into a vectorized model with jax.vmap. The in_axes argument is a tuple whose length matches the number of arguments passed into model (in this case 2). Each tuple element indicates which dimension should be vectorized for the corresponding function argument. In our case, X is an $m times 3$ array ($m$ indicating the number of samples in the batch). Therefore, in_axes is set to (None, 0) because we don&#39;t want to vectorize over params, but we do want to vectorize the zeroth dimension of X. . As an aside, I don&#39;t like the fact that params and model are both passed as arguments to the loss function. Eventually, I&#39;d like to keep the params dictionary in some sort of model object, pass the model to the loss, and have the model implementation handle all the parameter specific stuff. This is how all of the JAX-based neural libraries (Haiku, Flax, Equinox, etc seem to work.) . Training Loop . The training loop tunes the model parameters for a specified number of epochs. For now the parameters are adjusted once per epoch, after the entire dataset is consumed by the model. . def train(data, lr=1e-2, model=linear_model, num_epochs=50, loss=mse_loss): X, y = data loss_vals = np.zeros(num_epochs) # initialize the model parameters params = {&#39;w&#39;: jnp.array([0,0,0], dtype=jnp.float32), &#39;b&#39;: 0.0} for i in range(num_epochs): loss_i, grad_params_i = loss(params, model, X, y) for key in params: params[key] -= lr*grad_params_i[key] loss_vals[i] = loss_i return loss_vals, params . X, y = generate_data(w = jnp.array([1.0, 2.0, 3.0]), b=4.0, num_samples=100) num_epochs, lr = 500, 1e-2 loss_values, params = train(data=(X, y), lr=lr, num_epochs=num_epochs, model=linear_model) . print(f&#39;weights = {params[&quot;w&quot;]}, bias = {params[&quot;b&quot;]}&#39;) . weights = [0.99990535 1.9992862 3.0005229 ], bias = 3.999452590942383 . It looks like the learned parameters are pretty close to the parameters used to generate the initial dataset. This provides a little assurance that the training loop is working properly. . Performance Curve . Let&#39;s see the trend in the loss function. . plt.rcParams[&#39;font.size&#39;] = 20 plt.figure(1, figsize=(20,5)) plt.plot(np.arange(num_epochs), loss_values, linewidth=2) plt.grid() plt.xlabel(&#39;Epochs&#39;) plt.ylabel(&#39;Loss&#39;) plt.xlim(0, num_epochs) plt.tight_layout() . Conclusion . In future JAX-related posts, I&#39;m planning on using it to build more sophisticated systems. This might include solving concocted toy problems, implementing models from journal articles, or doing something new. I realize there are plenty of fairly mature libraries out there that can do this sort of thing, but I&#39;d rather implement software that I can customize to meet my needs. Of course this doesn&#39;t mean that I won&#39;t read code and borrow ideas from other developers. .",
            "url": "https://jrreed83.github.io/technicalities/jupyter/2022/07/09/2022-JAX-LinearRegression.html",
            "relUrl": "/jupyter/2022/07/09/2022-JAX-LinearRegression.html",
            "date": " • Jul 9, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jrreed83.github.io/technicalities/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jrreed83.github.io/technicalities/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi, I’m Joey. I work for a small, but very capable company that builds situationally aware sensor systems using ideas from communications theory, signal processing, and machine learning. . This website is an archive of technical stuff that I want to remember. Every effort will be taken to make each article clear, concise, and useful. .",
          "url": "https://jrreed83.github.io/technicalities/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jrreed83.github.io/technicalities/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}